## To cache the inverse of a matrix:
 +## Matrix inversion is often a costly computation and it is benificial to cache the inverse
 +## of a matrix rather than compute it repeatedly.
 +## So I create two functions that are used to create an object that 
 +## stores a matrix and caches its inverse.
 +
 +## This function creates a special "matrix" object to cache inverse.
 +
 +makeCacheMatrix <- function(x = matrix()) {
 +        inver <- NULL
 +        set <- function(y) {
 +                x <<- y
 +                inver <<- NULL
 +        }
 +        get <- function() x
 +        setInverse <- function(inverse) inver <<- inverse
 +        getInverse <- function() inv
 +        list(set = set,
 +             get = get,
 +             setInverse = setInverse,
 +             getInverse = getInverse)
 +}
 +
 +
 +## The second function computes the inverse of the matrix created by 
 +## makeCacheMatrix above. If the inverse has already been calculated,
 +## then it should get the inverse from the cache.
 +
 +cacheSolve <- function(x, ...) {
 +        ## Return a matrix that is the inverse of 'x'
 +        inv <- x$getInverse()
 +        if (!is.null(inver)) {
 +                message("get cached data")
 +                return(inver)
 +        }
 +        mat <- x$get()
 +        inv <- solve(mat, ...)
 +        x$setInverse(inver)
 +        inver
 +}
